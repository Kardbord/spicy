### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
module foo {

import hilti;
import spicy_rt;

type X1 = struct {
    optional<iterator<stream>> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error();
    hook optional<string> __str__();
    hook void __on_0x25_finally();
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse2(inout value_ref<X1> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
} &on-heap;
type X2 = struct {
    optional<iterator<stream>> __begin &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position &internal &needed-by-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error();
    hook optional<string> __str__();
    hook void __on_0x25_finally();
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse2(inout value_ref<X2> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
} &on-heap;

global auto __feat%foo__X1%uses_random_access = True;
global auto __feat%foo__X2%uses_random_access = True;

method hook void foo::X1::__on_0x25_init() {
    cast<uint<64>>((*(*self).__position) - (*(*self).__begin));
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::X1::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe)  {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {
        hilti::debugIndent("spicy");

        if ( __feat%foo__X1%uses_random_access ) {
            (*self).__begin = begin(__cur);
            (*self).__position = begin(__cur);
        }


        if ( __feat%foo__X1%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( __feat%foo__X1%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }



        if ( __feat%foo__X1%uses_random_access ) 
            (*self).__position = begin(__cur);


        if ( __feat%foo__X1%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_done();

        if ( __feat%foo__X1%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        hilti::debugDedent("spicy");
        __result = (__cur, __lah, __lahe);
    }
    catch {

        if ( __feat%foo__X1%uses_random_access ) 
            (*self).__position = begin(__cur);

        (*self).__on_0x25_error();

        if ( __feat%foo__X1%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( __feat%foo__X1%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        throw;
    }


    if ( __feat%foo__X1%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( __feat%foo__X1%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    return __result;
}

method extern method view<stream> foo::X1::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<X1>())value_ref(default<X1>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X1 ->

    if ( __feat%foo__X1%uses_random_access ) 
        (*unit).__position = begin(ncur);

    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X1 ->

    return ncur;
}

method extern method view<stream> foo::X1::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<X1>())value_ref(default<X1>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::X1));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X1 ->

    if ( __feat%foo__X1%uses_random_access ) 
        (*unit).__position = begin(ncur);

    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X1 ->

    return ncur;
}

method extern method view<stream> foo::X1::parse2(inout value_ref<X1> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X1 ->

    if ( __feat%foo__X1%uses_random_access ) 
        (*unit).__position = begin(ncur);

    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X1 ->

    return ncur;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::X2::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe)  {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {
        hilti::debugIndent("spicy");

        if ( __feat%foo__X2%uses_random_access ) {
            (*self).__begin = begin(__cur);
            (*self).__position = begin(__cur);
        }


        if ( __feat%foo__X2%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( __feat%foo__X2%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }



        if ( __feat%foo__X2%uses_random_access ) 
            (*self).__position = begin(__cur);


        if ( __feat%foo__X2%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_done();

        if ( __feat%foo__X2%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        hilti::debugDedent("spicy");
        __result = (__cur, __lah, __lahe);
    }
    catch {

        if ( __feat%foo__X2%uses_random_access ) 
            (*self).__position = begin(__cur);

        (*self).__on_0x25_error();

        if ( __feat%foo__X2%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( __feat%foo__X2%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        throw;
    }


    if ( __feat%foo__X2%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( __feat%foo__X2%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    return __result;
}

method extern method view<stream> foo::X2::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<X2>())value_ref(default<X2>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X2 ->

    if ( __feat%foo__X2%uses_random_access ) 
        (*unit).__position = begin(ncur);

    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X2 ->

    return ncur;
}

method extern method view<stream> foo::X2::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<X2>())value_ref(default<X2>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::X2));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X2 ->

    if ( __feat%foo__X2%uses_random_access ) 
        (*unit).__position = begin(ncur);

    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X2 ->

    return ncur;
}

method extern method view<stream> foo::X2::parse2(inout value_ref<X2> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_X2 ->

    if ( __feat%foo__X2%uses_random_access ) 
        (*unit).__position = begin(ncur);

    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_X2 ->

    return ncur;
}

}
