### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_X0_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_X1_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse2(inout value_ref<foo::X0> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse2(inout value_ref<foo::X1> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse2(inout value_ref<foo::X2> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse2(inout value_ref<foo::X3> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks" &needed-by-feature="is_filter";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<spicy_rt::Forward> __forward &internal &needed-by-feature="is_filter";" -> null (removing unused member)
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "False || True" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::LogicalOr "True || False" -> expression::Ctor "True"
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_offset" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X0%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X1%uses_random_access" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X2%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X3%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%is_filter" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%is_filter" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%is_filter" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X4%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%supports_filters" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%supports_filters" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%supports_filters" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X5%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%supports_sinks" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@X6%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__begin = begin(ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { foo::X0::__parser = [$name="foo::X0", $is_public=False, $parse1=foo::X0::parse1, $parse2=foo::X0::parse2, $parse3=foo::X0::parse3, $context_new=Null, $type_info=typeinfo(foo::X0), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X0::__parser, $scope, Null); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { foo::X1::__parser = [$name="foo::X1", $is_public=False, $parse1=foo::X1::parse1, $parse2=foo::X1::parse2, $parse3=foo::X1::parse3, $context_new=Null, $type_info=typeinfo(foo::X1), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X1::__parser, $scope, Null); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { foo::X2::__parser = [$name="foo::X2", $is_public=False, $parse1=foo::X2::parse1, $parse2=foo::X2::parse2, $parse3=foo::X2::parse3, $context_new=Null, $type_info=typeinfo(foo::X2), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X2::__parser, $scope, Null); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { foo::X3::__parser = [$name="foo::X3", $is_public=False, $parse1=foo::X3::parse1, $parse2=foo::X3::parse2, $parse3=foo::X3::parse3, $context_new=Null, $type_info=typeinfo(foo::X3), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X3::__parser, $scope, Null); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo_X0_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo_X1_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo_X2_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo_X3_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo_X4_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo_X6_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_forward_eod(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_forward_eod(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__begin = __begin; }" -> statement::Block "{ (*self).__begin = __begin; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__begin = __begin; }" -> statement::Block "{ (*self).__begin = __begin; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__begin = __begin; }" -> statement::Block "{ (*self).__begin = __begin; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> statement::Block "{ (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> statement::Block "{ (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> statement::Block "{ (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*self).__position_update = Null; }" -> statement::Block "{ (*self).__position_update = Null; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*unit).__begin = begin(ncur); }" -> statement::Block "{ (*unit).__begin = begin(ncur); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*unit).__begin = begin(ncur); }" -> statement::Block "{ (*unit).__begin = begin(ncur); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*unit).__begin = begin(ncur); }" -> statement::Block "{ (*unit).__begin = begin(ncur); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> statement::Block "{ (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> statement::Block "{ (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }" -> statement::Block "{ (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { __trim = False; }" -> statement::Block "{ __trim = False; }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { foo::X4::__parser = [$name="foo::X4", $is_public=False, $parse1=foo::X4::parse1, $parse2=foo::X4::parse2, $parse3=foo::X4::parse3, $context_new=Null, $type_info=typeinfo(foo::X4), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X4::__parser, $scope, Null); }" -> statement::Block "{ foo::X4::__parser = [$name="foo::X4", $is_public=False, $parse1=foo::X4::parse1, $parse2=foo::X4::parse2, $parse3=foo::X4::parse3, $context_new=Null, $type_info=typeinfo(foo::X4), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X4::__parser, $scope, Null); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { foo::X6::__parser = [$name="foo::X6", $is_public=False, $parse1=foo::X6::parse1, $parse2=foo::X6::parse2, $parse3=foo::X6::parse3, $context_new=Null, $type_info=typeinfo(foo::X6), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X6::__parser, $scope, Null); }" -> statement::Block "{ foo::X6::__parser = [$name="foo::X6", $is_public=False, $parse1=foo::X6::parse1, $parse2=foo::X6::parse2, $parse3=foo::X6::parse3, $context_new=Null, $type_info=typeinfo(foo::X6), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::X6::__parser, $scope, Null); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> statement::Block "{ if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo_X5_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> statement::Block "{ local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo_X5_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { spicy_rt::filter_disconnect(self); }" -> statement::Block "{ spicy_rt::filter_disconnect(self); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { spicy_rt::filter_disconnect(self); }" -> statement::Block "{ spicy_rt::filter_disconnect(self); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { spicy_rt::filter_forward_eod(self); }" -> statement::Block "{ spicy_rt::filter_forward_eod(self); }"
[debug/optimizer] [<no location>] statement::If "if ( True ) { spicy_rt::filter_forward_eod(self); }" -> statement::Block "{ spicy_rt::filter_forward_eod(self); }"
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X0%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::X0' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X0%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::X0' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X0%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::X0' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X0%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::X0' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X1%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::X1' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X1%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::X1' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X1%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::X1' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X1%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::X1' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X2%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::X2' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X2%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::X2' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X2%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::X2' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X2%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::X2' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X2%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::X2' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X3%is_filter = False;" -> disabled feature 'is_filter' of type 'foo::X3' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X3%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::X3' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X3%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::X3' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X3%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::X3' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X3%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::X3' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X3%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::X3' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X4%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::X4' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X4%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::X4' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X4%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::X4' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X4%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::X4' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X4%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::X4' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X5%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::X5' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X5%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::X5' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X5%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::X5' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X5%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::X5' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X6%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::X6' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X6%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::X6' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X6%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::X6' since it is not used
[debug/optimizer] [feature_requirements.spicy:10:1-46:2] declaration::Constant "const bool __feat%foo@@X6%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::X6' since it is not used
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Function "method extern method view<stream> foo::X0::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:13:11-15:1" local value_ref<foo::X0> unit = value_ref(default<const foo::X0>()); local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data)); local int<64> lahead = 0; local iterator<stream> lahead_end; local optional<hilti::RecoverableFailure> error = Null; # "<...>/feature_requirements.spicy:13:11-15:1" # Begin parsing production: Unit: foo_X0 -> (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error); # End parsing production: Unit: foo_X0 -> (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); if ( error ) throw ; return ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Function "method extern method view<stream> foo::X0::parse2(inout value_ref<foo::X0> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:13:11-15:1" local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data)); local int<64> lahead = 0; local iterator<stream> lahead_end; local optional<hilti::RecoverableFailure> error = Null; # "<...>/feature_requirements.spicy:13:11-15:1" # Begin parsing production: Unit: foo_X0 -> (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error); # End parsing production: Unit: foo_X0 -> (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); if ( error ) throw ; return ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Function "method extern method view<stream> foo::X0::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:13:11-15:1" local value_ref<foo::X0> unit = value_ref(default<const foo::X0>()); spicy_rt::initializeParsedUnit((*gunit), unit, typeinfo(foo::X0)); local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data)); local int<64> lahead = 0; local iterator<stream> lahead_end; local optional<hilti::RecoverableFailure> error = Null; # "<...>/feature_requirements.spicy:13:11-15:1" # Begin parsing production: Unit: foo_X0 -> (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error); # End parsing production: Unit: foo_X0 -> (*unit).__offset = cast<uint<64>>(begin(ncur).offset() - begin(ncur).offset()); if ( error ) throw ; return ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X0::__parse_foo_X0_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:13:11-15:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); (*self).__error = __error; (*self).__position_update = Null; default<void>(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; hilti::debugDedent("spicy"); __result = (__cur, __lah, __lahe, __error); return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X0::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:13:11-15:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); (*self).__error = __error; (*self).__position_update = Null; (*self).__on_0x25_init(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo_X0_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); default<void>(); (*self).__error = __error; (*self).__position_update = Null; default<void>(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; throw; } (*self).__error = __error; (*self).__position_update = Null; default<void>(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:13:11-15:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Function "method extern method view<stream> foo::X1::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:18:11-20:1" local value_ref<foo::X1> unit = value_ref(default<const foo::X1>()); local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data)); local int<64> lahead = 0; local iterator<stream> lahead_end; local optional<hilti::RecoverableFailure> error = Null; # "<...>/feature_requirements.spicy:18:11-20:1" # Begin parsing production: Unit: foo_X1 -> (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error); # End parsing production: Unit: foo_X1 -> (*unit).__begin = begin(ncur); if ( error ) throw ; return ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Function "method extern method view<stream> foo::X1::parse2(inout value_ref<foo::X1> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:18:11-20:1" local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data)); local int<64> lahead = 0; local iterator<stream> lahead_end; local optional<hilti::RecoverableFailure> error = Null; # "<...>/feature_requirements.spicy:18:11-20:1" # Begin parsing production: Unit: foo_X1 -> (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error); # End parsing production: Unit: foo_X1 -> (*unit).__begin = begin(ncur); if ( error ) throw ; return ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Function "method extern method view<stream> foo::X1::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:18:11-20:1" local value_ref<foo::X1> unit = value_ref(default<const foo::X1>()); spicy_rt::initializeParsedUnit((*gunit), unit, typeinfo(foo::X1)); local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data)); local int<64> lahead = 0; local iterator<stream> lahead_end; local optional<hilti::RecoverableFailure> error = Null; # "<...>/feature_requirements.spicy:18:11-20:1" # Begin parsing production: Unit: foo_X1 -> (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error); # End parsing production: Unit: foo_X1 -> (*unit).__begin = begin(ncur); if ( error ) throw ; return ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X1::__parse_foo_X1_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:18:11-20:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; (*self).__begin = __begin; (*self).__error = __error; (*self).__position_update = Null; default<void>(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; hilti::debugDedent("spicy"); __result = (__cur, __lah, __lahe, __error); return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X1::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:18:11-20:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; try { __trim = False; hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); (*self).__begin = __begin; (*self).__error = __error; (*self).__position_update = Null; (*self).__on_0x25_init(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo_X1_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { (*self).__begin = __begin; default<void>(); (*self).__error = __error; (*self).__position_update = Null; default<void>(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; throw; } (*self).__error = __error; (*self).__position_update = Null; default<void>(); if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } __error = (*self).__error; return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:18:11-20:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:23:1-23:18] declaration::Type "type X2 = struct { optional<hilti::RecoverableFailure> __error &always-emit &internal; method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_X2_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error); } &on-heap;" -> null (removing unused type)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Function "method extern method view<stream> foo::X2::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:23:11-23:17" local value_ref<foo::X2> unit = value_ref(default<const foo::X2>()); local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data)); local int<64> lahead = 0; local iterator<stream> lahead_end; local optional<hilti::RecoverableFailure> error = Null; # "<...>/feature_requirements.spicy:23:11-23:17" # Begin parsing production: Unit: foo_X2 -> (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error); # End parsing production: Unit: foo_X2 -> if ( error ) throw ; return ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Function "method extern method view<stream> foo::X2::parse2(inout value_ref<foo::X2> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:23:11-23:17" local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data)); local int<64> lahead = 0; local iterator<stream> lahead_end; local optional<hilti::RecoverableFailure> error = Null; # "<...>/feature_requirements.spicy:23:11-23:17" # Begin parsing production: Unit: foo_X2 -> (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error); # End parsing production: Unit: foo_X2 -> if ( error ) throw ; return ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Function "method extern method view<stream> foo::X2::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:23:11-23:17" local value_ref<foo::X2> unit = value_ref(default<const foo::X2>()); spicy_rt::initializeParsedUnit((*gunit), unit, typeinfo(foo::X2)); local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data)); local int<64> lahead = 0; local iterator<stream> lahead_end; local optional<hilti::RecoverableFailure> error = Null; # "<...>/feature_requirements.spicy:23:11-23:17" # Begin parsing production: Unit: foo_X2 -> (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error); # End parsing production: Unit: foo_X2 -> if ( error ) throw ; return ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X2::__parse_foo_X2_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:23:11-23:17" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; (*self).__error = __error; default<void>(); __error = (*self).__error; hilti::debugDedent("spicy"); __result = (__cur, __lah, __lahe, __error); return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X2::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:23:11-23:17" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); (*self).__error = __error; default<void>(); __error = (*self).__error; local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo_X2_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { default<void>(); (*self).__error = __error; default<void>(); __error = (*self).__error; throw; } (*self).__error = __error; default<void>(); __error = (*self).__error; return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:23:11-23:17] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:26:1-28:2] declaration::Type "type X3 = struct { optional<hilti::RecoverableFailure> __error &always-emit &internal; method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_X3_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error); } &on-heap;" -> null (removing unused type)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Function "method extern method view<stream> foo::X3::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:26:11-28:1" local value_ref<foo::X3> unit = value_ref(default<const foo::X3>()); local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data)); local int<64> lahead = 0; local iterator<stream> lahead_end; local optional<hilti::RecoverableFailure> error = Null; # "<...>/feature_requirements.spicy:26:11-28:1" # Begin parsing production: Unit: foo_X3 -> (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error); # End parsing production: Unit: foo_X3 -> if ( error ) throw ; return ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Function "method extern method view<stream> foo::X3::parse2(inout value_ref<foo::X3> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:26:11-28:1" local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data)); local int<64> lahead = 0; local iterator<stream> lahead_end; local optional<hilti::RecoverableFailure> error = Null; # "<...>/feature_requirements.spicy:26:11-28:1" # Begin parsing production: Unit: foo_X3 -> (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error); # End parsing production: Unit: foo_X3 -> if ( error ) throw ; return ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Function "method extern method view<stream> foo::X3::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/feature_requirements.spicy:26:11-28:1" local value_ref<foo::X3> unit = value_ref(default<const foo::X3>()); spicy_rt::initializeParsedUnit((*gunit), unit, typeinfo(foo::X3)); local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data)); local int<64> lahead = 0; local iterator<stream> lahead_end; local optional<hilti::RecoverableFailure> error = Null; # "<...>/feature_requirements.spicy:26:11-28:1" # Begin parsing production: Unit: foo_X3 -> (ncur, lahead, lahead_end, error) = (*unit).__parse_stage1(data, begin(ncur), ncur, True, lahead, lahead_end, error); # End parsing production: Unit: foo_X3 -> if ( error ) throw ; return ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X3::__parse_foo_X3_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:26:11-28:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; (*self).__error = __error; default<void>(); __error = (*self).__error; hilti::debugDedent("spicy"); __result = (__cur, __lah, __lahe, __error); return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::X3::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/feature_requirements.spicy:26:11-28:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); (*self).__error = __error; default<void>(); __error = (*self).__error; local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo_X3_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { default<void>(); (*self).__error = __error; default<void>(); __error = (*self).__error; throw; } (*self).__error = __error; default<void>(); __error = (*self).__error; return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:26:11-28:1] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "method view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "method view<stream> parse2(inout value_ref<foo::X4> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context);" -> null
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:32:11-34:1] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "method view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "method view<stream> parse2(inout value_ref<foo::X5> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context);" -> null
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:36:18-40:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "method view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "method view<stream> parse2(inout value_ref<foo::X6> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context);" -> null
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [feature_requirements.spicy:43:11-46:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [hilti.hlt:22:1-22:100] declaration::Function "declare public function void print(any obj, bool newline = True) &cxxname="::hilti::rt::print" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:23:1-23:115] declaration::Function "declare public function void printValues(tuple<*> t, bool newline = True) &cxxname="::hilti::rt::printValues" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:25:1-25:105] declaration::Function "declare public function void debug(string dbg_stream, any obj) &cxxname="::hilti::rt::debug::print" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:29:1-29:92] declaration::Function "declare public function time current_time() &cxxname="::hilti::rt::time::current_time" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:30:1-30:150] declaration::Function "declare public function time mktime(uint<64> y, uint<64> m, uint<64> d, uint<64> H, uint<64> M, uint<64> S) &cxxname="::hilti::rt::time::mktime" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:32:1-32:87] declaration::Function "declare public function void abort() &cxxname="::hilti::rt::abort_with_backtrace" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:34:1-34:116] declaration::Function "declare public function optional<Profiler> profiler_start(string name) &cxxname="::hilti::rt::profiler::start" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:35:1-35:109] declaration::Function "declare public function void profiler_stop(optional<Profiler> p) &cxxname="::hilti::rt::profiler::stop" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:101:1-101:133] declaration::Function "## Decodes a stream of base64 data back into the clear. declare public function bytes base64_decode(inout spicy::Base64Stream stream_, bytes data) &cxxname="::spicy::rt::base64::decode" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:104:1-104:120] declaration::Function "## Finalizes a base64 stream used for decoding or encoding. declare public function bytes base64_finish(inout spicy::Base64Stream stream_) &cxxname="::spicy::rt::base64::finish" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:107:1-107:93] declaration::Function "## Returns the initialization value for CRC32 computation. declare public function uint<64> crc32_init() &cxxname="::spicy::rt::zlib::crc32_init" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:110:1-110:115] declaration::Function "## Computes a running CRC32. declare public function uint<64> crc32_add(uint<64> crc, bytes data) &cxxname="::spicy::rt::zlib::crc32_add" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:113:1-113:95] declaration::Function "## Returns the current wall clock time. declare public function time current_time() &cxxname="::hilti::rt::time::current_time" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:123:1-123:147] declaration::Function "## Constructs a time value from a tuple of broken-out elements specifying local time. ## ## - *y*: year (1970-...) ## - *m*: month (1-12) ## - *d*: day (1-31) ## - *H*: hour (0-23) ## - *M*: minute (0-59) ## - *S*: second (0-59) declare public function time mktime(uint<64> y, uint<64> m, uint<64> d, uint<64> H, uint<64> M, uint<64> S) &cxxname="::hilti::rt::time::mktime" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:126:1-126:115] declaration::Function "## Returns a bytes value rendered as a hex string. declare public function string bytes_to_hexstring(bytes value) &cxxname="::spicy::rt::bytes_to_hexstring" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:129:1-129:101] declaration::Function "## Returns the value of an environment variable, if set. declare public function optional<string> getenv(string name) &cxxname="::hilti::rt::getenv" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:141:1-141:114] declaration::Function "## Formats a time according to user-specified format string. ## ## This function uses the currently active locale and timezone to format ## values. Formatted strings cannot exceed 128 bytes. ## ## The format string can contain format specifiers supported by POSIX strftime, see ## https:<...>/strftime.html. ## ## This function can raise ``InvalidArgument`` if the timestamp could not be ## converted to local time or formatted. declare public function string strftime(string format, time timestamp) &cxxname="::hilti::rt::strftime" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:153:1-153:108] declaration::Function "## Parses time from a string. ## ## This function uses the currently active locale and timezone to parse values. ## ## The format string can contain format specifiers supported by POSIX strptime, see ## https:<...>/strptime.html. ## ## This function raises ``InvalidArgument`` if the string could not be parsed ## with the given format string, or ``OutOfRange`` if the parsed time value cannot ## be represented. declare public function time strptime(string buf, string format) &cxxname="::hilti::rt::strptime" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:158:1-158:101] declaration::Function "## Parses an address from a string. The address can be in standard IPv4 or IPv6 ## ASCII represententation. The function raises ``InvalidArgument`` if the string ## could not be parsed. declare public function addr parse_address(string s) &cxxname="::hilti::rt::address::parse" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:163:1-163:100] declaration::Function "## Parses an address from a bytes instance. The address can be in standard IPv4 ## or IPv6 ASCII represententation. The function raises ``InvalidArgument`` if the ## string could not be parsed. declare public function addr parse_address(bytes b) &cxxname="::hilti::rt::address::parse" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:168:1-168:73] declaration::Function "## Reports a confirmation to the host application indicating that the parser ## appears to be processing the expected input format. It's up to the host ## application how to use this information. declare public function void accept_input() &cxxname="::spicy::rt::accept_input";" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:179:1-179:89] declaration::Function "## Reports a violation to the host application indicating that the parser ## appears not to be processing the expected input format. It's up to the ## host application how to use this information. ## ## Note that this does not automatically abort processing. If that's desired, ## you need to trigger a parse error as well, e.g., by throwing an error, ## `throw "<error message>"`. ## ## reason: user-presentable description of why the input seems wrong declare public function void decline_input(string reason) &cxxname="::spicy::rt::decline_input";" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:89:1-89:108] declaration::Function "## Initializes a zlib stream for decompression. ## ## ``window_bits``: Same as the corresponding parameter for zlib's `inflateInit2` ## (see https:<...>/manual.html). ## ## Will throw a `ZlibError` exception if initialization fails. declare public function ZlibStream zlib_init(int<64> window_bits) &cxxname="::spicy::rt::zlib::init" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:92:1-92:135] declaration::Function "## Decompresses a chunk of data through the given zlib stream. declare public function bytes zlib_decompress(inout spicy::ZlibStream stream_, bytes data) &cxxname="::spicy::rt::zlib::decompress" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:95:1-95:114] declaration::Function "## Finalizes a zlib stream used for decompression. declare public function bytes zlib_finish(inout spicy::ZlibStream stream_) &cxxname="::spicy::rt::zlib::finish" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:98:1-98:133] declaration::Function "## Encodes a stream of data into base64. declare public function bytes base64_encode(inout spicy::Base64Stream stream_, bytes data) &cxxname="::spicy::rt::base64::encode" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:27:5-27:76] declaration::Field "method void connect_mime_type(string mime_type, string scope) &internal;" -> null (removing unused member)
[debug/optimizer] [spicy_rt.hlt:28:5-28:75] declaration::Field "method void connect_mime_type(bytes mime_type, string scope) &internal;" -> null (removing unused member)
[debug/optimizer] [spicy_rt.hlt:48:1-48:151] declaration::Function "declare public function void filter_forward(inout any filter &requires-type-feature="is_filter", bytes b) &cxxname="::spicy::rt::filter::forward" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:51:1-51:131] declaration::Function "declare public function void confirm(inout any unit &requires-type-feature="synchronization") &cxxname="::spicy::rt::confirm" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:52:1-52:129] declaration::Function "declare public function void reject(inout any unit &requires-type-feature="synchronization") &cxxname="::spicy::rt::reject" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:55:1-55:123] declaration::Function "declare public function UnitContext createContext(any ctx, spicy_rt::TypeInfo ti) &cxxname="::spicy::rt::detail::createContext" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:56:1-56:144] declaration::Function "declare public function void setContext(inout any unit, optional<UnitContext> ctx, spicy_rt::TypeInfo ti) &cxxname="::spicy::rt::detail::setContext" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:80:1-80:311] declaration::Function "declare public function void printParserState(string unit_id, value_ref<stream> data, optional<iterator<stream>> begin_, view<stream> cur, int<64> lahead, iterator<stream> lahead_end, string literal_mode, bool trim, optional<hilti::RecoverableFailure> err) &cxxname="::spicy::rt::detail::printParserState" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:82:1-82:185] declaration::Function "declare public function bool waitForInputOrEod(inout value_ref<stream> data, view<stream> cur, inout strong_ref<Filters> filters) &cxxname="::spicy::rt::detail::waitForInputOrEod" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:83:1-83:197] declaration::Function "declare public function bool waitForInputOrEod(inout value_ref<stream> data, view<stream> cur, uint<64> n, inout strong_ref<Filters> filters) &cxxname="::spicy::rt::detail::waitForInputOrEod" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:84:1-84:210] declaration::Function "declare public function void waitForInput(inout value_ref<stream> data, view<stream> cur, string error_msg, string location, inout strong_ref<Filters> filters) &cxxname="::spicy::rt::detail::waitForInput" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:85:1-85:216] declaration::Function "declare public function void waitForInput(inout value_ref<stream> data, view<stream> cur, uint<64> n, string error_msg, string location, strong_ref<Filters> filters) &cxxname="::spicy::rt::detail::waitForInput" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:86:1-86:171] declaration::Function "declare public function bool waitForEod(inout value_ref<stream> data, view<stream> cur, inout strong_ref<Filters> filters) &cxxname="::spicy::rt::detail::waitForEod" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:87:1-87:161] declaration::Function "declare public function bool atEod(inout value_ref<stream> data, view<stream> cur, inout strong_ref<Filters> filters) &cxxname="::spicy::rt::detail::atEod" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:89:1-89:218] declaration::Function "declare public function optional<iterator<stream>> unit_find(iterator<stream> begin_, iterator<stream> end_, optional<iterator<stream>> i, bytes needle, spicy_rt::FindDirection dir) &cxxname="::spicy::rt::detail::unitFind" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:91:1-91:88] declaration::Function "declare public function void backtrack() &cxxname="::spicy::rt::detail::backtrack" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X0::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X0::__parse_foo_X0_stage2
[debug/optimizer] removing field for unused method foo::X0::__parse_stage1
[debug/optimizer] removing field for unused method foo::X0::__str__
[debug/optimizer] removing field for unused method foo::X0::parse1
[debug/optimizer] removing field for unused method foo::X0::parse2
[debug/optimizer] removing field for unused method foo::X0::parse3
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X1::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X1::__parse_foo_X1_stage2
[debug/optimizer] removing field for unused method foo::X1::__parse_stage1
[debug/optimizer] removing field for unused method foo::X1::__str__
[debug/optimizer] removing field for unused method foo::X1::parse1
[debug/optimizer] removing field for unused method foo::X1::parse2
[debug/optimizer] removing field for unused method foo::X1::parse3
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_init
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X2::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X2::__parse_stage1
[debug/optimizer] removing field for unused method foo::X2::__str__
[debug/optimizer] removing field for unused method foo::X2::parse1
[debug/optimizer] removing field for unused method foo::X2::parse2
[debug/optimizer] removing field for unused method foo::X2::parse3
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_init
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X3::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X3::__parse_stage1
[debug/optimizer] removing field for unused method foo::X3::__str__
[debug/optimizer] removing field for unused method foo::X3::parse1
[debug/optimizer] removing field for unused method foo::X3::parse2
[debug/optimizer] removing field for unused method foo::X3::parse3
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_init
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X4::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X4::__str__
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X5::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X5::__str__
[debug/optimizer] removing field for unused method foo::X5::__str__
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_done
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_error
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::X6::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::X6::__str__
[debug/optimizer] removing field for unused method struct_6::parse1
[debug/optimizer] removing field for unused method struct_6::parse2
[debug/optimizer] removing field for unused method struct_6::parse3
[debug/optimizer] removing field for unused method struct_7::parse1
[debug/optimizer] removing field for unused method struct_7::parse2
[debug/optimizer] removing field for unused method struct_7::parse3
[debug/optimizer] removing field for unused method struct_8::parse1
[debug/optimizer] removing field for unused method struct_8::parse2
[debug/optimizer] removing field for unused method struct_8::parse3
