### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
[debug/optimizer] [hilti.hlt:35:1-35:116] declaration::Function "declare public function optional<Profiler> profiler_start(string name) &cxxname="::hilti::rt::profiler::start" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:56:1-56:117] declaration::Function "declare public function string exception_what(hilti::RecoverableFailure excpt) &cxxname="::hilti::rt::exception::what" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:55:1-55:114] declaration::Function "declare public function string exception_what(hilti::SystemException excpt) &cxxname="::hilti::rt::exception::what" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:60:1-60:119] declaration::Function "declare public function string exception_where(hilti::RecoverableFailure excpt) &cxxname="::hilti::rt::exception::where" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:59:1-59:116] declaration::Function "declare public function string exception_where(hilti::SystemException excpt) &cxxname="::hilti::rt::exception::where" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:30:1-30:92] declaration::Function "declare public function time current_time() &cxxname="::hilti::rt::time::current_time" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:31:1-31:150] declaration::Function "declare public function time mktime(uint<64> y, uint<64> m, uint<64> d, uint<64> H, uint<64> M, uint<64> S) &cxxname="::hilti::rt::time::mktime" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:33:1-33:87] declaration::Function "declare public function void abort() &cxxname="::hilti::rt::abort_with_backtrace" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:26:1-26:105] declaration::Function "declare public function void debug(string dbg_stream, any obj) &cxxname="::hilti::rt::debug::print" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:28:1-28:103] declaration::Function "declare public function void debugDedent(string dbg_stream) &cxxname="::hilti::rt::debug::dedent" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:27:1-27:103] declaration::Function "declare public function void debugIndent(string dbg_stream) &cxxname="::hilti::rt::debug::indent" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:24:1-24:115] declaration::Function "declare public function void printValues(tuple<*> t, bool newline = True) &cxxname="::hilti::rt::printValues" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:36:1-36:109] declaration::Function "declare public function void profiler_stop(optional<Profiler> p) &cxxname="::hilti::rt::profiler::stop" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [const.hlt:17:14-17:14] expression::Name "f" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [const.hlt:25:5-25:5] expression::Name "f" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [const.hlt:35:5-35:5] expression::Name "f" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [const.hlt:53:1-53:1] expression::Name "f" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [const.hlt:16:14-16:14] expression::Name "t" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [const.hlt:19:5-19:5] expression::Name "t" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [const.hlt:31:5-31:5] expression::Name "t" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [const.hlt:52:1-52:1] expression::Name "t" -> expression::Ctor "True" (inlining constant)
[debug/optimizer] [const.hlt:53:1-53:8] expression::Ternary "False ? 0 : 1" -> expression::Ctor "1"
[debug/optimizer] [const.hlt:52:1-52:8] expression::Ternary "True ? 1 : 0" -> expression::Ctor "1"
[debug/optimizer] [const.hlt:25:1-29:1] statement::If "if ( False ) { 2; } else { 3; }" -> statement::Block "{ 3; }"
[debug/optimizer] [const.hlt:35:1-37:1] statement::If "if ( False ) { 5; }" -> null
[debug/optimizer] [const.hlt:19:1-23:1] statement::If "if ( True ) { 0; } else { 1; }" -> statement::If "if ( True ) { 0; }"
[debug/optimizer] [const.hlt:10:1-55:1] statement::If "if ( True ) { 0; }" -> statement::Block "{ 0; }"
[debug/optimizer] [const.hlt:31:1-33:1] statement::If "if ( True ) { 4; }" -> statement::Block "{ 4; }"
