### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
// Begin of Foo (from "<...>/spicyc-hello-world.spicy")
// Compiled by HILTI version X.X.X

#include <hilti/rt/compiler-setup.h>

#include <hilti/rt/libhilti.h>
#include <spicy/rt/libspicy.h>

namespace __hlt::type_info { namespace {
    extern const ::hilti::rt::TypeInfo __ti_hilti_AddressFamily;
    extern const ::hilti::rt::TypeInfo __ti_hilti_BitOrder;
    extern const ::hilti::rt::TypeInfo __ti_hilti_ByteOrder;
    extern const ::hilti::rt::TypeInfo __ti_hilti_Captures;
    extern const ::hilti::rt::TypeInfo __ti_hilti_Charset;
    extern const ::hilti::rt::TypeInfo __ti_hilti_Exception;
    extern const ::hilti::rt::TypeInfo __ti_hilti_MatchState;
    extern const ::hilti::rt::TypeInfo __ti_hilti_Protocol;
    extern const ::hilti::rt::TypeInfo __ti_hilti_RealType;
    extern const ::hilti::rt::TypeInfo __ti_hilti_RuntimeError;
    extern const ::hilti::rt::TypeInfo __ti_hilti_Side;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_Backtrack;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_BitOrder;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_Direction;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_Filters;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_FindDirection;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_Forward;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_HiltiResumable;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_MIMEType;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_ParseError;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_ParsedUnit;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_Parser;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_ParserPort;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_Sink;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_SinkState;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_TypeInfo;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_UnitAlreadyConnected;
    extern const ::hilti::rt::TypeInfo __ti_spicy_rt_UnitContext;
    extern const ::hilti::rt::TypeInfo __ti_vectorx30spicy_rt_ParserPort;
} }

namespace __hlt::Foo {
    extern void __init_module();
    extern void __register_module();
}

namespace __hlt::type_info { namespace {
    const ::hilti::rt::TypeInfo __ti_hilti_AddressFamily = { "hilti::AddressFamily", "hilti::AddressFamily", new ::hilti::rt::type_info::Enum(std::vector<::hilti::rt::type_info::enum_::Label>({::hilti::rt::type_info::enum_::Label{ "IPv4", 0 }, ::hilti::rt::type_info::enum_::Label{ "IPv6", 1 }, ::hilti::rt::type_info::enum_::Label{ "Undef", -1 }})) };
    const ::hilti::rt::TypeInfo __ti_hilti_BitOrder = { "hilti::BitOrder", "hilti::BitOrder", new ::hilti::rt::type_info::Enum(std::vector<::hilti::rt::type_info::enum_::Label>({::hilti::rt::type_info::enum_::Label{ "LSB0", 0 }, ::hilti::rt::type_info::enum_::Label{ "MSB0", 1 }, ::hilti::rt::type_info::enum_::Label{ "Undef", -1 }})) };
    const ::hilti::rt::TypeInfo __ti_hilti_ByteOrder = { "hilti::ByteOrder", "hilti::ByteOrder", new ::hilti::rt::type_info::Enum(std::vector<::hilti::rt::type_info::enum_::Label>({::hilti::rt::type_info::enum_::Label{ "Little", 0 }, ::hilti::rt::type_info::enum_::Label{ "Big", 1 }, ::hilti::rt::type_info::enum_::Label{ "Network", 2 }, ::hilti::rt::type_info::enum_::Label{ "Host", 3 }, ::hilti::rt::type_info::enum_::Label{ "Undef", -1 }})) };
    const ::hilti::rt::TypeInfo __ti_hilti_Captures = { "hilti::Captures", "hilti::Captures", new ::hilti::rt::type_info::Vector(&::hilti::rt::type_info::bytes, ::hilti::rt::type_info::Vector::accessor<::hilti::rt::Bytes>()) };
    const ::hilti::rt::TypeInfo __ti_hilti_Charset = { "hilti::Charset", "hilti::Charset", new ::hilti::rt::type_info::Enum(std::vector<::hilti::rt::type_info::enum_::Label>({::hilti::rt::type_info::enum_::Label{ "ASCII", 0 }, ::hilti::rt::type_info::enum_::Label{ "UTF8", 1 }, ::hilti::rt::type_info::enum_::Label{ "Undef", -1 }})) };
    const ::hilti::rt::TypeInfo __ti_hilti_Exception = { "hilti::Exception", "hilti::Exception", new ::hilti::rt::type_info::Exception() };
    const ::hilti::rt::TypeInfo __ti_hilti_MatchState = { "hilti::MatchState", "hilti::MatchState", new ::hilti::rt::type_info::Struct(std::vector<::hilti::rt::type_info::struct_::Field>({})) };
    const ::hilti::rt::TypeInfo __ti_hilti_Protocol = { "hilti::Protocol", "hilti::Protocol", new ::hilti::rt::type_info::Enum(std::vector<::hilti::rt::type_info::enum_::Label>({::hilti::rt::type_info::enum_::Label{ "TCP", 0 }, ::hilti::rt::type_info::enum_::Label{ "UDP", 1 }, ::hilti::rt::type_info::enum_::Label{ "ICMP", 2 }, ::hilti::rt::type_info::enum_::Label{ "Undef", -1 }})) };
    const ::hilti::rt::TypeInfo __ti_hilti_RealType = { "hilti::RealType", "hilti::RealType", new ::hilti::rt::type_info::Enum(std::vector<::hilti::rt::type_info::enum_::Label>({::hilti::rt::type_info::enum_::Label{ "IEEE754_Single", 0 }, ::hilti::rt::type_info::enum_::Label{ "IEEE754_Double", 1 }, ::hilti::rt::type_info::enum_::Label{ "Undef", -1 }})) };
    const ::hilti::rt::TypeInfo __ti_hilti_RuntimeError = { "hilti::RuntimeError", "hilti::RuntimeError", new ::hilti::rt::type_info::Exception() };
    const ::hilti::rt::TypeInfo __ti_hilti_Side = { "hilti::Side", "hilti::Side", new ::hilti::rt::type_info::Enum(std::vector<::hilti::rt::type_info::enum_::Label>({::hilti::rt::type_info::enum_::Label{ "Left", 0 }, ::hilti::rt::type_info::enum_::Label{ "Right", 1 }, ::hilti::rt::type_info::enum_::Label{ "Both", 2 }, ::hilti::rt::type_info::enum_::Label{ "Undef", -1 }})) };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_Backtrack = { "spicy_rt::Backtrack", "spicy_rt::Backtrack", new ::hilti::rt::type_info::Exception() };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_BitOrder = { "spicy_rt::BitOrder", "spicy_rt::BitOrder", new ::hilti::rt::type_info::Enum(std::vector<::hilti::rt::type_info::enum_::Label>({::hilti::rt::type_info::enum_::Label{ "LSB0", 0 }, ::hilti::rt::type_info::enum_::Label{ "MSB0", 1 }, ::hilti::rt::type_info::enum_::Label{ "Undef", -1 }})) };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_Direction = { "spicy_rt::Direction", "spicy_rt::Direction", new ::hilti::rt::type_info::Enum(std::vector<::hilti::rt::type_info::enum_::Label>({::hilti::rt::type_info::enum_::Label{ "Originator", 0 }, ::hilti::rt::type_info::enum_::Label{ "Responder", 1 }, ::hilti::rt::type_info::enum_::Label{ "Both", 2 }, ::hilti::rt::type_info::enum_::Label{ "Undef", -1 }})) };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_Filters = { "spicy_rt::Filters", "spicy_rt::Filters", new ::hilti::rt::type_info::Library() };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_FindDirection = { "spicy_rt::FindDirection", "spicy_rt::FindDirection", new ::hilti::rt::type_info::Library() };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_Forward = { "spicy_rt::Forward", "spicy_rt::Forward", new ::hilti::rt::type_info::Library() };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_HiltiResumable = { "spicy_rt::HiltiResumable", "spicy_rt::HiltiResumable", new ::hilti::rt::type_info::Library() };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_MIMEType = { "spicy_rt::MIMEType", "spicy_rt::MIMEType", new ::hilti::rt::type_info::Library() };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_ParseError = { "spicy_rt::ParseError", "spicy_rt::ParseError", new ::hilti::rt::type_info::Exception() };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_ParsedUnit = { "spicy_rt::ParsedUnit", "spicy_rt::ParsedUnit", new ::hilti::rt::type_info::Library() };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_Parser = { "spicy_rt::Parser", "spicy_rt::Parser", new ::hilti::rt::type_info::Struct(std::vector<::hilti::rt::type_info::struct_::Field>({::hilti::rt::type_info::struct_::Field{ "name", &::hilti::rt::type_info::string, offsetof(::spicy::rt::Parser, name), false }, ::hilti::rt::type_info::struct_::Field{ "parse1", &::hilti::rt::type_info::any, offsetof(::spicy::rt::Parser, parse1), false }, ::hilti::rt::type_info::struct_::Field{ "parse2", &::hilti::rt::type_info::any, offsetof(::spicy::rt::Parser, parse2), false }, ::hilti::rt::type_info::struct_::Field{ "parse3", &::hilti::rt::type_info::any, offsetof(::spicy::rt::Parser, parse3), false }, ::hilti::rt::type_info::struct_::Field{ "context_new", &::hilti::rt::type_info::any, offsetof(::spicy::rt::Parser, context_new), false }, ::hilti::rt::type_info::struct_::Field{ "type_info", &type_info::__ti_spicy_rt_TypeInfo, offsetof(::spicy::rt::Parser, type_info), false }, ::hilti::rt::type_info::struct_::Field{ "description", &::hilti::rt::type_info::string, offsetof(::spicy::rt::Parser, description), false }, ::hilti::rt::type_info::struct_::Field{ "mime_types", &::hilti::rt::type_info::any, offsetof(::spicy::rt::Parser, mime_types), false }, ::hilti::rt::type_info::struct_::Field{ "ports", &type_info::__ti_vectorx30spicy_rt_ParserPort, offsetof(::spicy::rt::Parser, ports), false }})) };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_ParserPort = { "spicy_rt::ParserPort", "spicy_rt::ParserPort", new ::hilti::rt::type_info::Library() };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_Sink = { "spicy_rt::Sink", "spicy_rt::Sink", new ::hilti::rt::type_info::Struct(std::vector<::hilti::rt::type_info::struct_::Field>({})) };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_SinkState = { "spicy_rt::SinkState", "spicy_rt::SinkState", new ::hilti::rt::type_info::Library() };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_TypeInfo = { "spicy_rt::TypeInfo", "spicy_rt::TypeInfo", new ::hilti::rt::type_info::Library() };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_UnitAlreadyConnected = { "spicy_rt::UnitAlreadyConnected", "spicy_rt::UnitAlreadyConnected", new ::hilti::rt::type_info::Exception() };
    const ::hilti::rt::TypeInfo __ti_spicy_rt_UnitContext = { "spicy_rt::UnitContext", "spicy_rt::UnitContext", new ::hilti::rt::type_info::Library() };
    const ::hilti::rt::TypeInfo __ti_vectorx30spicy_rt_ParserPort = { {}, "vector<spicy_rt::ParserPort>", new ::hilti::rt::type_info::Vector(&type_info::__ti_spicy_rt_ParserPort, ::hilti::rt::type_info::Vector::accessor<::spicy::rt::ParserPort>()) };
} }

HILTI_PRE_INIT(__hlt::Foo::__register_module)

extern void __hlt::Foo::__init_module() {
      __location__("<...>/spicyc-hello-world.spicy:8:1");
    ::hilti::rt::print(std::string("Hello, world!"), ::hilti::rt::Bool(true));
      __location__("<...>/spicyc-hello-world.spicy:9:1");
    ::hilti::rt::printValues(std::make_tuple(std::string("Hello"), std::string("world!")), ::hilti::rt::Bool(true));
}

extern void __hlt::Foo::__register_module() { ::hilti::rt::detail::registerModule({ "Foo", &__init_module, nullptr, nullptr}); }

/* __HILTI_LINKER_V1__
{"module":"Foo","namespace":"__hlt::Foo","path":"<...>/spicyc-hello-world.spicy","version":1}
*/

