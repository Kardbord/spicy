### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "iterator<stream> __begin &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error);" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse2(inout value_ref<foo::A> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse2(inout value_ref<foo::C> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse2(inout value_ref<foo::F> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static;" -> null
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "optional<iterator<stream>> __position_update &internal &needed-by-feature="uses_random_access";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks" &needed-by-feature="is_filter";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::Parser __parser &static &internal &needed-by-feature="supports_filters" &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "spicy_rt::SinkState __sink &internal &needed-by-feature="supports_sinks";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "strong_ref<spicy_rt::Filters> __filters &internal &needed-by-feature="supports_filters";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "uint<64> __offset &internal &needed-by-feature="uses_offset";" -> null (removing unused member)
[debug/optimizer] [<no location>] declaration::Field "weak_ref<spicy_rt::Forward> __forward &internal &needed-by-feature="is_filter";" -> null (removing unused member)
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::LogicalOr "False || False" -> expression::Ctor "False"
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@A%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@B%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@C%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@D%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%is_filter" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%supports_filters" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%supports_sinks" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_offset" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] expression::Name "__feat%foo@@F%uses_random_access" -> expression::Ctor "False" (inlining constant)
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__begin = begin(__ncur); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*__unit).__offset = cast<uint<64>>(begin(__ncur).offset() - begin(__ncur).offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__begin = __begin; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__offset = cast<uint<64>>(begin(__cur).offset() - __begin.offset()); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { (*self).__position_update = Null; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { __trim = False; }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { foo::A::__parser = [$name="foo::A", $is_public=False, $parse1=foo::A::parse1, $parse2=foo::A::parse2, $parse3=foo::A::parse3, $context_new=Null, $type_info=typeinfo(foo::A), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::A::__parser, $scope, Null); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { foo::C::__parser = [$name="foo::C", $is_public=False, $parse1=foo::C::parse1, $parse2=foo::C::parse2, $parse3=foo::C::parse3, $context_new=Null, $type_info=typeinfo(foo::C), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::C::__parser, $scope, Null); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { foo::F::__parser = [$name="foo::F", $is_public=False, $parse1=foo::F::parse1, $parse2=foo::F::parse2, $parse3=foo::F::parse3, $context_new=Null, $type_info=typeinfo(foo::F), $description="", $mime_types=vector(), $ports=vector()]; spicy_rt::registerParser(foo::F::__parser, $scope, Null); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { if ( (*self).__position_update ) { __cur = __cur.advance((*(*self).__position_update)); (*self).__position_update = Null; } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo_A_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo_B_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo_C_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo_D_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { local uint<64> __offset1 = begin((*__data)).offset(); if ( filtered = spicy_rt::filter_init(self, __data, __cur) ) { local value_ref<stream> __filtered_data = filtered; self.__parse_foo_F_stage2(__filtered_data, begin((*__filtered_data)), (*__filtered_data), __trim, __lah, __lahe, __error); local uint<64> __offset2 = begin((*__data)).offset(); __cur = __cur.advance(__offset2 - __offset1); if ( __trim ) (*__data).trim(begin(__cur)); __result = (__cur, __lah, __lahe, __error); } }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_disconnect(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_forward_eod(self); }" -> null
[debug/optimizer] [<no location>] statement::If "if ( False ) { spicy_rt::filter_forward_eod(self); }" -> null
[debug/optimizer] [hilti.hlt:23:1-23:100] declaration::Function "declare public function void print(any obj, bool newline = True) &cxxname="::hilti::rt::print" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:24:1-24:115] declaration::Function "declare public function void printValues(tuple<*> t, bool newline = True) &cxxname="::hilti::rt::printValues" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:26:1-26:105] declaration::Function "declare public function void debug(string dbg_stream, any obj) &cxxname="::hilti::rt::debug::print" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:30:1-30:92] declaration::Function "declare public function time current_time() &cxxname="::hilti::rt::time::current_time" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:31:1-31:150] declaration::Function "declare public function time mktime(uint<64> y, uint<64> m, uint<64> d, uint<64> H, uint<64> M, uint<64> S) &cxxname="::hilti::rt::time::mktime" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:33:1-33:87] declaration::Function "declare public function void abort() &cxxname="::hilti::rt::abort_with_backtrace" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:35:1-35:116] declaration::Function "declare public function optional<Profiler> profiler_start(string name) &cxxname="::hilti::rt::profiler::start" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [hilti.hlt:36:1-36:109] declaration::Function "declare public function void profiler_stop(optional<Profiler> p) &cxxname="::hilti::rt::profiler::stop" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:102:1-102:133] declaration::Function "## Decodes a stream of base64 data back into the clear. declare public function bytes base64_decode(inout spicy::Base64Stream stream_, bytes data) &cxxname="::spicy::rt::base64::decode" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:105:1-105:120] declaration::Function "## Finalizes a base64 stream used for decoding or encoding. declare public function bytes base64_finish(inout spicy::Base64Stream stream_) &cxxname="::spicy::rt::base64::finish" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:108:1-108:93] declaration::Function "## Returns the initialization value for CRC32 computation. declare public function uint<64> crc32_init() &cxxname="::spicy::rt::zlib::crc32_init" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:111:1-111:115] declaration::Function "## Computes a running CRC32. declare public function uint<64> crc32_add(uint<64> crc, bytes data) &cxxname="::spicy::rt::zlib::crc32_add" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:114:1-114:95] declaration::Function "## Returns the current wall clock time. declare public function time current_time() &cxxname="::hilti::rt::time::current_time" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:124:1-124:147] declaration::Function "## Constructs a time value from a tuple of broken-out elements specifying local time. ## ## - *y*: year (1970-...) ## - *m*: month (1-12) ## - *d*: day (1-31) ## - *H*: hour (0-23) ## - *M*: minute (0-59) ## - *S*: second (0-59) declare public function time mktime(uint<64> y, uint<64> m, uint<64> d, uint<64> H, uint<64> M, uint<64> S) &cxxname="::hilti::rt::time::mktime" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:127:1-127:115] declaration::Function "## Returns a bytes value rendered as a hex string. declare public function string bytes_to_hexstring(bytes value) &cxxname="::spicy::rt::bytes_to_hexstring" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:130:1-130:101] declaration::Function "## Returns the value of an environment variable, if set. declare public function optional<string> getenv(string name) &cxxname="::hilti::rt::getenv" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:142:1-142:114] declaration::Function "## Formats a time according to user-specified format string. ## ## This function uses the currently active locale and timezone to format ## values. Formatted strings cannot exceed 128 bytes. ## ## The format string can contain format specifiers supported by POSIX strftime, see ## https:<...>/strftime.html. ## ## This function can raise ``InvalidArgument`` if the timestamp could not be ## converted to local time or formatted. declare public function string strftime(string format, time timestamp) &cxxname="::hilti::rt::strftime" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:154:1-154:108] declaration::Function "## Parses time from a string. ## ## This function uses the currently active locale and timezone to parse values. ## ## The format string can contain format specifiers supported by POSIX strptime, see ## https:<...>/strptime.html. ## ## This function raises ``InvalidArgument`` if the string could not be parsed ## with the given format string, or ``OutOfRange`` if the parsed time value cannot ## be represented. declare public function time strptime(string buf, string format) &cxxname="::hilti::rt::strptime" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:159:1-159:101] declaration::Function "## Parses an address from a string. The address can be in standard IPv4 or IPv6 ## ASCII represententation. The function raises ``InvalidArgument`` if the string ## could not be parsed. declare public function addr parse_address(string s) &cxxname="::hilti::rt::address::parse" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:164:1-164:100] declaration::Function "## Parses an address from a bytes instance. The address can be in standard IPv4 ## or IPv6 ASCII represententation. The function raises ``InvalidArgument`` if the ## string could not be parsed. declare public function addr parse_address(bytes b) &cxxname="::hilti::rt::address::parse" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:169:1-169:73] declaration::Function "## Reports a confirmation to the host application indicating that the parser ## appears to be processing the expected input format. It's up to the host ## application how to use this information. declare public function void accept_input() &cxxname="::spicy::rt::accept_input";" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:180:1-180:89] declaration::Function "## Reports a violation to the host application indicating that the parser ## appears not to be processing the expected input format. It's up to the ## host application how to use this information. ## ## Note that this does not automatically abort processing. If that's desired, ## you need to trigger a parse error as well, e.g., by throwing an error, ## `throw "<error message>"`. ## ## reason: user-presentable description of why the input seems wrong declare public function void decline_input(string reason) &cxxname="::spicy::rt::decline_input";" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:90:1-90:108] declaration::Function "## Initializes a zlib stream for decompression. ## ## ``window_bits``: Same as the corresponding parameter for zlib's `inflateInit2` ## (see https:<...>/manual.html). ## ## Will throw a `ZlibError` exception if initialization fails. declare public function ZlibStream zlib_init(int<64> window_bits) &cxxname="::spicy::rt::zlib::init" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:93:1-93:135] declaration::Function "## Decompresses a chunk of data through the given zlib stream. declare public function bytes zlib_decompress(inout spicy::ZlibStream stream_, bytes data) &cxxname="::spicy::rt::zlib::decompress" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:96:1-96:114] declaration::Function "## Finalizes a zlib stream used for decompression. declare public function bytes zlib_finish(inout spicy::ZlibStream stream_) &cxxname="::spicy::rt::zlib::finish" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy.spicy:99:1-99:133] declaration::Function "## Encodes a stream of data into base64. declare public function bytes base64_encode(inout spicy::Base64Stream stream_, bytes data) &cxxname="::spicy::rt::base64::encode" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:28:5-28:76] declaration::Field "method void connect_mime_type(string mime_type, string scope) &internal;" -> null (removing unused member)
[debug/optimizer] [spicy_rt.hlt:29:5-29:75] declaration::Field "method void connect_mime_type(bytes mime_type, string scope) &internal;" -> null (removing unused member)
[debug/optimizer] [spicy_rt.hlt:46:1-46:203] declaration::Function "declare public function strong_ref<stream> filter_init(inout any unit &requires-type-feature="supports_filters", inout value_ref<stream> data, view<stream> cur) &cxxname="::spicy::rt::filter::init" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:47:1-47:204] declaration::Function "declare public function void filter_connect(inout any unit &requires-type-feature="supports_filters", strong_ref<*> filter &requires-type-feature="is_filter") &cxxname="::spicy::rt::filter::connect" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:48:1-48:153] declaration::Function "declare public function void filter_disconnect(inout any unit &requires-type-feature="supports_filters") &cxxname="::spicy::rt::filter::disconnect" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:49:1-49:151] declaration::Function "declare public function void filter_forward(inout any filter &requires-type-feature="is_filter", bytes b) &cxxname="::spicy::rt::filter::forward" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:50:1-50:150] declaration::Function "declare public function void filter_forward_eod(inout any filter &requires-type-feature="is_filter") &cxxname="::spicy::rt::filter::forward_eod" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:52:1-52:131] declaration::Function "declare public function void confirm(inout any unit &requires-type-feature="synchronization") &cxxname="::spicy::rt::confirm" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:53:1-53:129] declaration::Function "declare public function void reject(inout any unit &requires-type-feature="synchronization") &cxxname="::spicy::rt::reject" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:56:1-56:123] declaration::Function "declare public function UnitContext createContext(any ctx, spicy_rt::TypeInfo ti) &cxxname="::spicy::rt::detail::createContext" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:57:1-57:144] declaration::Function "declare public function void setContext(inout any unit, optional<UnitContext> ctx, spicy_rt::TypeInfo ti) &cxxname="::spicy::rt::detail::setContext" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:81:1-81:311] declaration::Function "declare public function void printParserState(string unit_id, value_ref<stream> data, optional<iterator<stream>> begin_, view<stream> cur, int<64> lahead, iterator<stream> lahead_end, string literal_mode, bool trim, optional<hilti::RecoverableFailure> err) &cxxname="::spicy::rt::detail::printParserState" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:83:1-83:185] declaration::Function "declare public function bool waitForInputOrEod(inout value_ref<stream> data, view<stream> cur, inout strong_ref<Filters> filters) &cxxname="::spicy::rt::detail::waitForInputOrEod" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:84:1-84:197] declaration::Function "declare public function bool waitForInputOrEod(inout value_ref<stream> data, view<stream> cur, uint<64> n, inout strong_ref<Filters> filters) &cxxname="::spicy::rt::detail::waitForInputOrEod" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:85:1-85:210] declaration::Function "declare public function void waitForInput(inout value_ref<stream> data, view<stream> cur, string error_msg, string location, inout strong_ref<Filters> filters) &cxxname="::spicy::rt::detail::waitForInput" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:86:1-86:216] declaration::Function "declare public function void waitForInput(inout value_ref<stream> data, view<stream> cur, uint<64> n, string error_msg, string location, strong_ref<Filters> filters) &cxxname="::spicy::rt::detail::waitForInput" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:87:1-87:171] declaration::Function "declare public function bool waitForEod(inout value_ref<stream> data, view<stream> cur, inout strong_ref<Filters> filters) &cxxname="::spicy::rt::detail::waitForEod" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:88:1-88:161] declaration::Function "declare public function bool atEod(inout value_ref<stream> data, view<stream> cur, inout strong_ref<Filters> filters) &cxxname="::spicy::rt::detail::atEod" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:90:1-90:218] declaration::Function "declare public function optional<iterator<stream>> unit_find(iterator<stream> begin_, iterator<stream> end_, optional<iterator<stream>> i, bytes needle, spicy_rt::FindDirection dir) &cxxname="::spicy::rt::detail::unitFind" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [spicy_rt.hlt:92:1-92:88] declaration::Function "declare public function void backtrack() &cxxname="::spicy::rt::detail::backtrack" &have_prototype;" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@A%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::A' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@A%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::A' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@A%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::A' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@A%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::A' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@A%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::A' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@B%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::B' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@B%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::B' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@B%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::B' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@B%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::B' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@B%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::B' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@C%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::C' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@C%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::C' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@C%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::C' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@C%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::C' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@C%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::C' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@D%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::D' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@D%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::D' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@D%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::D' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@D%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::D' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@D%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::D' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@F%is_filter = False;" -> disabled feature 'is_filter' of type 'foo::F' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@F%supports_filters = False;" -> disabled feature 'supports_filters' of type 'foo::F' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@F%supports_sinks = False;" -> disabled feature 'supports_sinks' of type 'foo::F' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@F%synchronization = False;" -> disabled feature 'synchronization' of type 'foo::F' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@F%uses_offset = False;" -> disabled feature 'uses_offset' of type 'foo::F' since it is not used
[debug/optimizer] [unused-functions.spicy:10:1-32:2] declaration::Constant "const bool __feat%foo@@F%uses_random_access = False;" -> disabled feature 'uses_random_access' of type 'foo::F' since it is not used
[debug/optimizer] [unused-functions.spicy:13:1-13:16] declaration::Function "function void f1() { }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:16:1-16:23] declaration::Function "public function void f2() { }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:18:1-18:17] declaration::Type "type A = struct { optional<hilti::RecoverableFailure> __error &always-emit &internal; method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_A_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error); } &on-heap;" -> null (removing unused type)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Function "method extern method view<stream> foo::A::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:18:10-18:16" local value_ref<foo::A> __unit = value_ref(default<const foo::A>()); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:18:10-18:16" # Begin parsing production: Unit: foo_A -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo_A -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Function "method extern method view<stream> foo::A::parse2(inout value_ref<foo::A> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:18:10-18:16" local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:18:10-18:16" # Begin parsing production: Unit: foo_A -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo_A -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Function "method extern method view<stream> foo::A::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:18:10-18:16" local value_ref<foo::A> __unit = value_ref(default<const foo::A>()); spicy_rt::initializeParsedUnit((*__gunit), __unit, typeinfo(foo::A)); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:18:10-18:16" # Begin parsing production: Unit: foo_A -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo_A -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::A::__parse_foo_A_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/unused-functions.spicy:18:10-18:16" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; (*self).__error = __error; default<void>(); __error = (*self).__error; hilti::debugDedent("spicy"); __result = (__cur, __lah, __lahe, __error); return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::A::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/unused-functions.spicy:18:10-18:16" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); (*self).__error = __error; default<void>(); __error = (*self).__error; local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo_A_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { default<void>(); (*self).__error = __error; default<void>(); __error = (*self).__error; throw; } (*self).__error = __error; default<void>(); __error = (*self).__error; return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:18:10-18:16] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "method view<stream> parse2(inout value_ref<foo::B> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [unused-functions.spicy:21:17-21:23] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:21:17-21:23] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:21:17-21:23] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:21:17-21:23] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:21:17-21:23] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Function "method extern method view<stream> foo::C::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:24:10-24:16" local value_ref<foo::C> __unit = value_ref(default<const foo::C>()); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:24:10-24:16" # Begin parsing production: Unit: foo_C -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo_C -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Function "method extern method view<stream> foo::C::parse2(inout value_ref<foo::C> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:24:10-24:16" local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:24:10-24:16" # Begin parsing production: Unit: foo_C -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo_C -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] declaration::Function "method extern method view<stream> foo::C::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:24:10-24:16" local value_ref<foo::C> __unit = value_ref(default<const foo::C>()); spicy_rt::initializeParsedUnit((*__gunit), __unit, typeinfo(foo::C)); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:24:10-24:16" # Begin parsing production: Unit: foo_C -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo_C -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:24:10-24:16] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "method view<stream> parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "method view<stream> parse2(inout value_ref<foo::D> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] declaration::Field "method view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context);" -> null
[debug/optimizer] [unused-functions.spicy:25:17-27:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:25:17-27:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:25:17-27:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:25:17-27:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:25:17-27:1] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:30:1-32:2] declaration::Type "type F = struct { optional<hilti::RecoverableFailure> __error &always-emit &internal; method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __parse_foo_F_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error); } &on-heap;" -> null (removing unused type)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook optional<string> __str__();" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_confirmed() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_done();" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_error(string __except);" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_finally();" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_gap(uint<64> seq, uint<64> len);" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_init();" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_rejected() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_skipped(uint<64> seq);" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_synced() &needed-by-feature="synchronization";" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Field "hook void __on_0x25_undelivered(uint<64> seq, bytes data);" -> null
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Function "method extern method view<stream> foo::F::parse1(inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:30:10-32:1" local value_ref<foo::F> __unit = value_ref(default<const foo::F>()); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:30:10-32:1" # Begin parsing production: Unit: foo_F -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo_F -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Function "method extern method view<stream> foo::F::parse2(inout value_ref<foo::F> __unit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:30:10-32:1" local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:30:10-32:1" # Begin parsing production: Unit: foo_F -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo_F -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Function "method extern method view<stream> foo::F::parse3(inout value_ref<spicy_rt::ParsedUnit> __gunit, inout value_ref<stream> __data, optional<view<stream>> __cur = Null, optional<spicy_rt::UnitContext> __context) &needed-by-feature="is_filter" &needed-by-feature="supports_sinks" &static { # "<...>/unused-functions.spicy:30:10-32:1" local value_ref<foo::F> __unit = value_ref(default<const foo::F>()); spicy_rt::initializeParsedUnit((*__gunit), __unit, typeinfo(foo::F)); local view<stream> __ncur = __cur ? (*__cur) : cast<view<stream>>((*__data)); local int<64> __lahead = 0; local iterator<stream> __lahead_end; local optional<hilti::RecoverableFailure> __error = Null; # "<...>/unused-functions.spicy:30:10-32:1" # Begin parsing production: Unit: foo_F -> (__ncur, __lahead, __lahead_end, __error) = (*__unit).__parse_stage1(__data, begin(__ncur), __ncur, True, __lahead, __lahead_end, __error); # End parsing production: Unit: foo_F -> if ( __error ) throw ; return __ncur; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::F::__parse_foo_F_stage2(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/unused-functions.spicy:30:10-32:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; (*self).__error = __error; default<void>(); __error = (*self).__error; hilti::debugDedent("spicy"); __result = (__cur, __lah, __lahe, __error); return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] declaration::Function "method method tuple<const view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> foo::F::__parse_stage1(inout value_ref<stream> __data, iterator<stream> __begin, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe, copy optional<hilti::RecoverableFailure> __error) { # "<...>/unused-functions.spicy:30:10-32:1" local tuple<view<stream>, int<64>, const iterator<stream>, optional<hilti::RecoverableFailure>> __result; try { hilti::debugIndent("spicy"); local iterator<stream> __begin = begin(__cur); (*self).__error = __error; default<void>(); __error = (*self).__error; local strong_ref<stream> filtered = Null; if ( ! filtered ) __result = (*self).__parse_foo_F_stage2(__data, __begin, __cur, __trim, __lah, __lahe, __error); } catch ( hilti::SystemException __except ) { default<void>(); (*self).__error = __error; default<void>(); __error = (*self).__error; throw; } (*self).__error = __error; default<void>(); __error = (*self).__error; return __result; }" -> null (removing declaration for unused function)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] operator_::struct_::MemberCall "(*self).__on_0x25_done()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] operator_::struct_::MemberCall "(*self).__on_0x25_error(hilti::exception_what(__except))" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] operator_::struct_::MemberCall "(*self).__on_0x25_finally()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] [unused-functions.spicy:30:10-32:1] operator_::struct_::MemberCall "(*self).__on_0x25_init()" -> expression::Ctor "default<void>()" (replacing call to unimplemented method with default value)
[debug/optimizer] removing field for unused method foo::A::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::A::__on_0x25_done
[debug/optimizer] removing field for unused method foo::A::__on_0x25_error
[debug/optimizer] removing field for unused method foo::A::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::A::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::A::__on_0x25_init
[debug/optimizer] removing field for unused method foo::A::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::A::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::A::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::A::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::A::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::A::__parse_stage1
[debug/optimizer] removing field for unused method foo::A::__str__
[debug/optimizer] removing field for unused method foo::A::parse1
[debug/optimizer] removing field for unused method foo::A::parse2
[debug/optimizer] removing field for unused method foo::A::parse3
[debug/optimizer] removing field for unused method foo::B::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::B::__on_0x25_done
[debug/optimizer] removing field for unused method foo::B::__on_0x25_error
[debug/optimizer] removing field for unused method foo::B::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::B::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::B::__on_0x25_init
[debug/optimizer] removing field for unused method foo::B::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::B::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::B::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::B::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::B::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::B::__str__
[debug/optimizer] removing field for unused method foo::C::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::C::__on_0x25_done
[debug/optimizer] removing field for unused method foo::C::__on_0x25_error
[debug/optimizer] removing field for unused method foo::C::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::C::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::C::__on_0x25_init
[debug/optimizer] removing field for unused method foo::C::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::C::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::C::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::C::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::C::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::C::__str__
[debug/optimizer] removing field for unused method foo::C::parse1
[debug/optimizer] removing field for unused method foo::C::parse2
[debug/optimizer] removing field for unused method foo::C::parse3
[debug/optimizer] removing field for unused method foo::D::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::D::__on_0x25_done
[debug/optimizer] removing field for unused method foo::D::__on_0x25_error
[debug/optimizer] removing field for unused method foo::D::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::D::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::D::__on_0x25_init
[debug/optimizer] removing field for unused method foo::D::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::D::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::D::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::D::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::D::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::D::__str__
[debug/optimizer] removing field for unused method foo::F::__on_0x25_confirmed
[debug/optimizer] removing field for unused method foo::F::__on_0x25_done
[debug/optimizer] removing field for unused method foo::F::__on_0x25_error
[debug/optimizer] removing field for unused method foo::F::__on_0x25_finally
[debug/optimizer] removing field for unused method foo::F::__on_0x25_gap
[debug/optimizer] removing field for unused method foo::F::__on_0x25_init
[debug/optimizer] removing field for unused method foo::F::__on_0x25_overlap
[debug/optimizer] removing field for unused method foo::F::__on_0x25_rejected
[debug/optimizer] removing field for unused method foo::F::__on_0x25_skipped
[debug/optimizer] removing field for unused method foo::F::__on_0x25_synced
[debug/optimizer] removing field for unused method foo::F::__on_0x25_undelivered
[debug/optimizer] removing field for unused method foo::F::__parse_stage1
[debug/optimizer] removing field for unused method foo::F::__str__
[debug/optimizer] removing field for unused method foo::F::parse1
[debug/optimizer] removing field for unused method foo::F::parse2
[debug/optimizer] removing field for unused method foo::F::parse3
[debug/optimizer] removing field for unused method struct_3::parse1
[debug/optimizer] removing field for unused method struct_3::parse2
[debug/optimizer] removing field for unused method struct_3::parse3
[debug/optimizer] removing field for unused method struct_5::parse1
[debug/optimizer] removing field for unused method struct_5::parse2
[debug/optimizer] removing field for unused method struct_5::parse3
