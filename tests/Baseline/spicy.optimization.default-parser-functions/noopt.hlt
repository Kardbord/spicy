### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
module foo {

import hilti;
import spicy_rt;

type P0 = struct {
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error();
    hook optional<string> __str__();
    hook void __on_0x25_finally();
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse2(inout value_ref<P0> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
} &on-heap;
public type P1 = struct {
    spicy_rt::Parser __parser &static &internal;
    spicy_rt::SinkState __sink &internal;
    strong_ref<spicy_rt::Filters> __filters &internal;
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error();
    hook optional<string> __str__();
    hook void __on_0x25_finally();
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse2(inout value_ref<P1> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_P1_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;
public type P2 = struct {
    uint<8> x &optional;
    uint<8> y &optional;
    optional<iterator<stream>> __begin &internal &requires-type-feature="uses_random_access";
    optional<iterator<stream>> __position &internal &requires-type-feature="uses_random_access";
    optional<iterator<stream>> __position_update &internal &requires-type-feature="uses_random_access";
    spicy_rt::Parser __parser &static &internal;
    spicy_rt::SinkState __sink &internal;
    strong_ref<spicy_rt::Filters> __filters &internal;
    hook void __on_x(uint<8> __dd);
    hook void __on_y(uint<8> __dd);
    hook void __on_0x25_init();
    hook void __on_0x25_done();
    hook void __on_0x25_error();
    hook optional<string> __str__();
    hook void __on_0x25_finally();
    hook void __on_0x25_gap(uint<64> seq, uint<64> len);
    hook void __on_0x25_overlap(uint<64> seq, bytes old, bytes new_);
    hook void __on_0x25_skipped(uint<64> seq);
    hook void __on_0x25_undelivered(uint<64> seq, bytes data);
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse2(inout value_ref<P2> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_P2_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;

global auto __feat%foo__P1%supports_filters = True;
global auto __feat%foo__P1%supports_sinks = True;
global auto __feat%foo__P2%supports_filters = True;
global auto __feat%foo__P2%supports_sinks = True;
global auto __feat%foo__P2%uses_random_access = True;

method method tuple<view<stream>, int<64>, iterator<stream>> foo::P0::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe)  {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {
        hilti::debugIndent("spicy");
        (*self).__on_0x25_init();
        (*self).__on_0x25_done();
        hilti::debugDedent("spicy");
        __result = (__cur, __lah, __lahe);
    }
    catch {
        (*self).__on_0x25_error();
        (*self).__on_0x25_finally();
        throw;
    }

    (*self).__on_0x25_finally();
    return __result;
}

method extern method view<stream> foo::P0::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<P0>())value_ref(default<P0>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_P0 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_P0 ->

    return ncur;
}

method extern method view<stream> foo::P0::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<P0>())value_ref(default<P0>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::P0));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_P0 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_P0 ->

    return ncur;
}

method extern method view<stream> foo::P0::parse2(inout value_ref<P0> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_P0 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_P0 ->

    return ncur;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::P1::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) &always-emit {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {
        hilti::debugIndent("spicy");
        (*self).__on_0x25_init();

        if ( local auto filtered = spicy_rt::filter_init(self, __data, __cur); filtered ) {
            local value_ref<stream> filtered_data = filtered;
            (*self).__parse_foo_P1_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe);
            __cur = __cur.advance(|__cur|);

            if ( __trim ) 
                (*__data).trim(begin(__cur));

            __result = (__cur, __lah, __lahe);
        }
        else 
            __result = (*self).__parse_foo_P1_stage2(__data, __cur, __trim, __lah, __lahe);

    }
    catch {
        (*self).__on_0x25_error();
        spicy_rt::filter_disconnect(self);
        (*self).__on_0x25_finally();
        throw;
    }

    (*self).__on_0x25_finally();
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::P1::__parse_foo_P1_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) &always-emit {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    (*self).__on_0x25_done();
    spicy_rt::filter_disconnect(self);
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

method extern method view<stream> foo::P1::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<P1>())value_ref(default<P1>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_P1 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_P1 ->

    return ncur;
}

method extern method view<stream> foo::P1::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<P1>())value_ref(default<P1>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::P1));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_P1 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_P1 ->

    return ncur;
}

method extern method view<stream> foo::P1::parse2(inout value_ref<P1> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_P1 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_P1 ->

    return ncur;
}

init function void __register_foo_P1() {
    foo::P1::__parser = [$name="foo::P1", $parse1=foo::P1::parse1, $parse2=foo::P1::parse2, $parse3=foo::P1::parse3, $context_new=Null, $type_info=typeinfo(P1), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::P1::__parser, hilti::linker_scope(), Null);
}

method hook void foo::P2::__on_y(uint<8> __dd) {
}

method hook void foo::P2::__on_0x25_error() {
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::P2::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) &always-emit {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {
        hilti::debugIndent("spicy");

        if ( __feat%foo__P2%uses_random_access ) {
            (*self).__begin = begin(__cur);
            (*self).__position = begin(__cur);
        }


        if ( __feat%foo__P2%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_init();

        if ( __feat%foo__P2%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }



        if ( local auto filtered = spicy_rt::filter_init(self, __data, __cur); filtered ) {
            local value_ref<stream> filtered_data = filtered;
            (*self).__parse_foo_P2_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe);
            __cur = __cur.advance(|__cur|);

            if ( __trim ) 
                (*__data).trim(begin(__cur));

            __result = (__cur, __lah, __lahe);
        }
        else 
            __result = (*self).__parse_foo_P2_stage2(__data, __cur, __trim, __lah, __lahe);

    }
    catch {

        if ( __feat%foo__P2%uses_random_access ) 
            (*self).__position = begin(__cur);

        (*self).__on_0x25_error();
        spicy_rt::filter_disconnect(self);

        if ( __feat%foo__P2%uses_random_access ) 
            (*self).__position_update = Null;

        (*self).__on_0x25_finally();

        if ( __feat%foo__P2%uses_random_access ) 

            if ( (*self).__position_update ) {
                __cur = __cur.advance((*(*self).__position_update));
                (*self).__position_update = Null;
            }


        throw;
    }


    if ( __feat%foo__P2%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_finally();

    if ( __feat%foo__P2%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::P2::__parse_foo_P2_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) &always-emit {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;

    # Begin parsing production: Variable: x   -> uint<8>

    if ( __feat%foo__P2%uses_random_access ) 
        (*self).__position = begin(__cur);

    spicy_rt::waitForInput(__data, __cur, 1, "expecting 1 bytes for unpacking value", "<...>/default-parser-functions.spicy:19:8", (*self).__filters);
    ((*self).x, __cur) = (*unpack<uint<8>>((__cur, hilti::ByteOrder::Network)));

    if ( False ) 
        (*__data).trim(begin(__cur));

    # End parsing production: Variable: x   -> uint<8>

    if ( __feat%foo__P2%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_x((*self).x);

    if ( __feat%foo__P2%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }



    # Begin parsing production: Variable: y   -> uint<8>

    if ( __feat%foo__P2%uses_random_access ) 
        (*self).__position = begin(__cur);

    spicy_rt::waitForInput(__data, __cur, 1, "expecting 1 bytes for unpacking value", "<...>/default-parser-functions.spicy:20:8", (*self).__filters);
    ((*self).y, __cur) = (*unpack<uint<8>>((__cur, hilti::ByteOrder::Network)));

    if ( False ) 
        (*__data).trim(begin(__cur));

    # End parsing production: Variable: y   -> uint<8>

    if ( __feat%foo__P2%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_y((*self).y);

    if ( __feat%foo__P2%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }



    if ( __feat%foo__P2%uses_random_access ) 
        (*self).__position = begin(__cur);


    if ( __feat%foo__P2%uses_random_access ) 
        (*self).__position_update = Null;

    (*self).__on_0x25_done();

    if ( __feat%foo__P2%uses_random_access ) 

        if ( (*self).__position_update ) {
            __cur = __cur.advance((*(*self).__position_update));
            (*self).__position_update = Null;
        }


    spicy_rt::filter_disconnect(self);
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

method extern method view<stream> foo::P2::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<P2>())value_ref(default<P2>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_P2 -> x y

    if ( __feat%foo__P2%uses_random_access ) 
        (*unit).__position = begin(ncur);

    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_P2 -> x y

    return ncur;
}

method extern method view<stream> foo::P2::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<P2>())value_ref(default<P2>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::P2));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_P2 -> x y

    if ( __feat%foo__P2%uses_random_access ) 
        (*unit).__position = begin(ncur);

    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_P2 -> x y

    return ncur;
}

method extern method view<stream> foo::P2::parse2(inout value_ref<P2> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_P2 -> x y

    if ( __feat%foo__P2%uses_random_access ) 
        (*unit).__position = begin(ncur);

    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_P2 -> x y

    return ncur;
}

init function void __register_foo_P2() {
    foo::P2::__parser = [$name="foo::P2", $parse1=foo::P2::parse1, $parse2=foo::P2::parse2, $parse3=foo::P2::parse3, $context_new=Null, $type_info=typeinfo(P2), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::P2::__parser, hilti::linker_scope(), Null);
}

}
