### BTest baseline data generated by btest-diff. Do not edit. Use "btest -U/-u" to update. Requires BTest >= 0.63.
module foo {

import hilti;
import spicy_rt;

public type Pub2 = struct {
    spicy_rt::Parser __parser &static &internal;
    spicy_rt::SinkState __sink &internal;
    strong_ref<spicy_rt::Filters> __filters &internal;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse2(inout value_ref<Pub2> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_Pub2_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;
type Priv5 = struct {
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;
type Priv6 = struct {
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;
public type Pub3 = struct {
    value_ref<Priv5> anon_2 &optional &no-emit;
    value_ref<Priv6> x &optional;
    spicy_rt::Parser __parser &static &internal;
    spicy_rt::SinkState __sink &internal;
    strong_ref<spicy_rt::Filters> __filters &internal;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse2(inout value_ref<Pub3> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_Pub3_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;
public type Pub4 = enum { A = 0, B = 1, C = 2 };
type Priv8 = enum { A = 0, B = 1, C = 2 };
public type Priv9 = struct {
    Priv8 en &default=Priv8::A;
    spicy_rt::Parser __parser &static &internal;
    spicy_rt::SinkState __sink &internal;
    strong_ref<spicy_rt::Filters> __filters &internal;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
    method extern view<stream> parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse2(inout value_ref<Priv9> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method extern view<stream> parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static;
    method tuple<view<stream>, int<64>, iterator<stream>> __parse_foo_Priv9_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe);
} &on-heap;

global auto __feat%foo__Pub2%supports_filters = True;
global auto __feat%foo__Pub2%supports_sinks = True;
global auto __feat%foo__Pub3%supports_filters = True;
global auto __feat%foo__Pub3%supports_sinks = True;
global auto __feat%foo__Priv9%supports_filters = True;
global auto __feat%foo__Priv9%supports_sinks = True;

method method tuple<view<stream>, int<64>, iterator<stream>> foo::Pub2::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) &always-emit {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {
        hilti::debugIndent("spicy");
        default<void>();

        if ( local auto filtered = spicy_rt::filter_init(self, __data, __cur); filtered ) {
            local value_ref<stream> filtered_data = filtered;
            (*self).__parse_foo_Pub2_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe);
            __cur = __cur.advance(|__cur|);

            if ( __trim ) 
                (*__data).trim(begin(__cur));

            __result = (__cur, __lah, __lahe);
        }
        else 
            __result = (*self).__parse_foo_Pub2_stage2(__data, __cur, __trim, __lah, __lahe);

    }
    catch {
        default<void>();
        spicy_rt::filter_disconnect(self);
        default<void>();
        throw;
    }

    default<void>();
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::Pub2::__parse_foo_Pub2_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) &always-emit {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    default<void>();
    spicy_rt::filter_disconnect(self);
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

method extern method view<stream> foo::Pub2::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<Pub2>())value_ref(default<Pub2>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_Pub2 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_Pub2 ->

    return ncur;
}

method extern method view<stream> foo::Pub2::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<Pub2>())value_ref(default<Pub2>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::Pub2));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_Pub2 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_Pub2 ->

    return ncur;
}

method extern method view<stream> foo::Pub2::parse2(inout value_ref<Pub2> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_Pub2 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_Pub2 ->

    return ncur;
}

init function void __register_foo_Pub2() {
    foo::Pub2::__parser = [$name="foo::Pub2", $parse1=foo::Pub2::parse1, $parse2=foo::Pub2::parse2, $parse3=foo::Pub2::parse3, $context_new=Null, $type_info=typeinfo(Pub2), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::Pub2::__parser, hilti::linker_scope(), Null);
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::Priv5::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe)  {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {
        hilti::debugIndent("spicy");
        default<void>();
        default<void>();
        hilti::debugDedent("spicy");
        __result = (__cur, __lah, __lahe);
    }
    catch {
        default<void>();
        default<void>();
        throw;
    }

    default<void>();
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::Priv6::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe)  {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {
        hilti::debugIndent("spicy");
        default<void>();
        default<void>();
        hilti::debugDedent("spicy");
        __result = (__cur, __lah, __lahe);
    }
    catch {
        default<void>();
        default<void>();
        throw;
    }

    default<void>();
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::Pub3::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) &always-emit {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {
        hilti::debugIndent("spicy");
        default<void>();

        if ( local auto filtered = spicy_rt::filter_init(self, __data, __cur); filtered ) {
            local value_ref<stream> filtered_data = filtered;
            (*self).__parse_foo_Pub3_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe);
            __cur = __cur.advance(|__cur|);

            if ( __trim ) 
                (*__data).trim(begin(__cur));

            __result = (__cur, __lah, __lahe);
        }
        else 
            __result = (*self).__parse_foo_Pub3_stage2(__data, __cur, __trim, __lah, __lahe);

    }
    catch {
        default<void>();
        spicy_rt::filter_disconnect(self);
        default<void>();
        throw;
    }

    default<void>();
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::Pub3::__parse_foo_Pub3_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) &always-emit {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    local value_ref<Priv5> __transient_anon_2;

    # Begin parsing production: Unit: foo_Priv5_2 ->
    __transient_anon_2 = default<Priv5>();
    (__cur, __lah, __lahe) = (*__transient_anon_2).__parse_stage1(__data, __cur, __trim, __lah, __lahe);
    # End parsing production: Unit: foo_Priv5_2 ->

    # Begin parsing production: Unit: foo_Priv6_2 ->
    (*self).x = default<Priv6>();
    (__cur, __lah, __lahe) = (*(*self).x).__parse_stage1(__data, __cur, __trim, __lah, __lahe);
    # End parsing production: Unit: foo_Priv6_2 ->

    default<void>();
    default<void>();
    spicy_rt::filter_disconnect(self);
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

method extern method view<stream> foo::Pub3::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<Pub3>())value_ref(default<Pub3>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_Pub3 -> foo_Priv5_2 foo_Priv6_2
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_Pub3 -> foo_Priv5_2 foo_Priv6_2

    return ncur;
}

method extern method view<stream> foo::Pub3::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<Pub3>())value_ref(default<Pub3>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::Pub3));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_Pub3 -> foo_Priv5_2 foo_Priv6_2
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_Pub3 -> foo_Priv5_2 foo_Priv6_2

    return ncur;
}

method extern method view<stream> foo::Pub3::parse2(inout value_ref<Pub3> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_Pub3 -> foo_Priv5_2 foo_Priv6_2
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_Pub3 -> foo_Priv5_2 foo_Priv6_2

    return ncur;
}

init function void __register_foo_Pub3() {
    foo::Pub3::__parser = [$name="foo::Pub3", $parse1=foo::Pub3::parse1, $parse2=foo::Pub3::parse2, $parse3=foo::Pub3::parse3, $context_new=Null, $type_info=typeinfo(Pub3), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::Pub3::__parser, hilti::linker_scope(), Null);
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::Priv9::__parse_stage1(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) &always-emit {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    try {
        hilti::debugIndent("spicy");
        default<void>();

        if ( local auto filtered = spicy_rt::filter_init(self, __data, __cur); filtered ) {
            local value_ref<stream> filtered_data = filtered;
            (*self).__parse_foo_Priv9_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe);
            __cur = __cur.advance(|__cur|);

            if ( __trim ) 
                (*__data).trim(begin(__cur));

            __result = (__cur, __lah, __lahe);
        }
        else 
            __result = (*self).__parse_foo_Priv9_stage2(__data, __cur, __trim, __lah, __lahe);

    }
    catch {
        default<void>();
        spicy_rt::filter_disconnect(self);
        default<void>();
        throw;
    }

    default<void>();
    return __result;
}

method method tuple<view<stream>, int<64>, iterator<stream>> foo::Priv9::__parse_foo_Priv9_stage2(inout value_ref<stream> __data, copy view<stream> __cur, copy bool __trim, copy int<64> __lah, copy iterator<stream> __lahe) &always-emit {
    local tuple<view<stream>, int<64>, iterator<stream>> __result;
    default<void>();
    spicy_rt::filter_disconnect(self);
    hilti::debugDedent("spicy");
    __result = (__cur, __lah, __lahe);
    return __result;
}

method extern method view<stream> foo::Priv9::parse1(inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<Priv9>())value_ref(default<Priv9>());
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_Priv9 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_Priv9 ->

    return ncur;
}

method extern method view<stream> foo::Priv9::parse3(inout value_ref<spicy_rt::ParsedUnit> gunit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local auto unit = value_ref(default<Priv9>())value_ref(default<Priv9>());
    spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(foo::Priv9));
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_Priv9 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_Priv9 ->

    return ncur;
}

method extern method view<stream> foo::Priv9::parse2(inout value_ref<Priv9> unit, inout value_ref<stream> data, optional<view<stream>> cur = Null, optional<spicy_rt::UnitContext> context) &static {
    local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data));
    local int<64> lahead = 0;
    local iterator<stream> lahead_end;

    # Begin parsing production: Unit: foo_Priv9 ->
    (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end);
    # End parsing production: Unit: foo_Priv9 ->

    return ncur;
}

init function void __register_foo_Priv9() {
    foo::Priv9::__parser = [$name="foo::Priv9", $parse1=foo::Priv9::parse1, $parse2=foo::Priv9::parse2, $parse3=foo::Priv9::parse3, $context_new=Null, $type_info=typeinfo(Priv9), $description="", $mime_types=vector(), $ports=vector()];
    spicy_rt::registerParser(foo::Priv9::__parser, hilti::linker_scope(), Null);
}

}
