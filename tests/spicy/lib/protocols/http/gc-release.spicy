# @TEST-EXEC: spicyc -d -j -L ${SPICY_ANALYZERS} -o http.hlto %INPUT
# @TEST-EXEC: awk -f generate.awk | HILTI_DEBUG=spicy-driver spicy-driver http.hlto -i 83 -p HTTP::Replies >output 2>debug.log
# @TEST-EXEC: btest-diff output
# @TEST-EXEC: cat debug.log | grep memory: | sed 's/.*heap=//' | sed 's/ .*//g' | sort | uniq | wc -l | awk '$1 > 5 { print "Error: Heap size changed too much"; exit 1; }' >&2
#
# @TEST-KNOWN-FAILURE: Unstable with Ubuntu's malloc (even though presumably not an actual leak)
#
# This test checks that with a large HTTP message, the input is parsed
# in small chunks without buffering them unnecessarily. In other words,
# even though the input is large, the heap size should stay
# more or less constant. We check that by recording the heap size
# an confirming that we don't see a lot of different values.

module Test;

import HTTP from protocol.http;

on HTTP::Message::%done {
    print "Content-Length:", self.content_length;
    }

@TEST-START-FILE generate.awk
# Generates a huge dummy HTTP response.

BEGIN {
    print "HTTP/1.1 200 OK"
    print "Content-Length:", 1000 * 1024;
    print "Content-Type: application/octet-stream"
    print ""

    for ( i = 0; i < 1000; i++ ) {
        for ( j = 0; j < 1024; j++ )
            printf("A");
        }
    }
@TEST-END-FILE
