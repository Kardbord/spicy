#! /usr/bin/env bash
#
# Copyright (c) 2020-2023 by the Zeek Project. See LICENSE for details.
#
# Auto-generates
# `{hilti,spicy}/toolchain/include/ast/builder/autogen/__node-factory.h`.
#
# This is a helper script that generates a bunch of simple forwarding methods
# that would be tedious to create by hand as a whole. We can still decide if
# this is some we want to keep long-term. Alternatively, we could just use the
# initial output as a starting point that we then maintain by hand.
#
# Note that this does not run automatically, it needs to be run manually when
# some of the input files change. That's because building the clang-based tool
# can be tricky and requires having the right dependencies installed.

function add_namespace {
    gsed -E "s/([ (])$1/\\1$2::$1/g"
}

function process_headers {
    output=$1
    headers="$2"

    cat <<EOF >"${output}"
// DO NOT EDIT. This file is automatically generated.
//
// To re-generate, run:
//
//     scripts/autogen-builder-api <build-directory> [<compile-db>]

EOF

        # cat /Users/robin/work/spicy/node-rewrite/hilti/toolchain/include/hilti/ast/builder/node-factory.autogen.h.tmp \
    find "${headers}" -name '*.h' -type f -not -name 'all.h' -not -name '__node-factory.h' -not -name 'ast-context.h' -not -path "*/builder/*" \
        | xargs -t -n 1 -P "$(nproc)" "${bin}" -p "${db}" \
        | add_namespace "Linkage" "declaration" \
        | add_namespace "Flavor" "type::function" \
        | add_namespace "function::Flavor" "type" \
        | add_namespace "Case" "statement::switch_" \
        | add_namespace "switch_::Cases" "statement" \
        | add_namespace "Kind" "expression::keyword" \
        | add_namespace "keyword::Kind" "expression" \
        | add_namespace "tuple::Elements" "ctor" \
        | add_namespace "map::Elements" "ctor" \
        | add_namespace "Fields" "type::struct_" \
        | add_namespace "struct_::Fields" "ctor" \
        | add_namespace "try_::Catches" "statement" \
        | add_namespace "enum_::Labels" "type" \
        | add_namespace "comment::Separator" "statement" \
        | add_namespace "assert::Exception" "statement" \
        | add_namespace "AnonymousStruct" "type::Struct" \
        | add_namespace "AnonymousUnion" "type::Union" \
        | add_namespace "switch_::Default" "statement" \
        | add_namespace "operand_list::Operand" "type" \
        | add_namespace "Wildcard" "type" \
        | sort | uniq >>"${output}"
}

if [ $# != 1 -a $# != 2 ]; then
    echo "usage: $0 <build-directory> [<compile-db>]"
    exit 1
fi

build=$1
base=$(cd "$(dirname "$0")/.." && pwd)
bin=${build}/bin/autogen-builder-api
db=$2

headers_hilti="${base}/hilti/toolchain/include/hilti/ast"
output_hilti="${base}/hilti/toolchain/include/ast/builder/autogen/__node-factory.h"

headers_spicy="${base}/spicy/toolchain/include/spicy/ast"
output_spicy="${base}/spicy/toolchain/include/ast/builder/autogen/__node-factory.h"

if [ -z "${db}" ]; then
    db="${build}/compile_commands.json"
fi

if [ ! -x "${bin}" ]; then
    echo "error: cannot find builder API binary at ${bin}"
    exit 1
fi

if [ ! -f "${db}" ]; then
    echo "error: cannot find compile database at ${db}"
    exit 1
fi

process_headers "${output_hilti}" "${headers_hilti}"
process_headers "${output_spicy}" "${headers_spicy}"
